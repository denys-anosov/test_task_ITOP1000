{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","time","setTime","timerOn","setTimerOn","status","setStatus","useEffect","unsub","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","handleStart","prevTimerState","handleStop","oneSec","className","durationInSeconds","hours","Math","floor","minutes","seconds","formatTime","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"8NA8FeA,EAxFO,WACpB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,eAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,IAUlB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLV,GACFD,GAAQ,SAAAY,GAAQ,OAAIA,EAAW,UAI9B,WACLN,EAAMO,KAAK,GACXP,EAAMQ,cAEP,CAACb,IAEJ,IAAMc,EAAc,WAClBb,GAAW,SAAAc,GAAc,OAAKA,KAC9BZ,EAAU,YAGNa,EAAa,WACjBjB,EAAQ,GACRE,GAAW,GACXE,EAAU,gBAUNc,EAASnB,EAAO,IAUtB,OACE,sBAAKoB,UAAU,MAAf,UACE,sBACEA,UAAU,OADZ,SAVe,SAACC,GAClB,IAAMC,EAAQC,KAAKC,MAAMH,EAAoB,MACvCI,EAAUF,KAAKC,MAAOH,EAAoB,KAAQ,IAClDK,EAAUL,EAA4B,KAARC,EAAyB,GAAVG,EAEnD,MAAM,GAAN,OAAUH,EAAV,aAAoBG,EAApB,aAAgCC,EAAhC,KAQKC,CAAWR,KAEd,gCACc,gBAAXf,GACC,wBACEwB,KAAK,SACLC,QAASb,EACTI,UAAU,SAHZ,mBAQU,YAAXhB,GACC,wBACEwB,KAAK,SACLC,QAASX,EACTE,UAAU,SAHZ,kBAQF,wBACEQ,KAAK,SACLC,QA7CY,WACd3B,GAAsB,YAAXE,IACbc,IACAF,MA2CII,UAAU,SAHZ,0BC9ERU,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.5c714931.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from \"rxjs/operators\";\nimport './App.css';\n\n\nconst App: React.FC = () => {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n  const [status, setStatus] = useState('not-ticking');\n\n  useEffect(() => {\n    const unsub = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsub))\n      .subscribe(() => {\n        if (timerOn) {\n          setTime(prevTime => prevTime + 1000)\n        }\n      });\n\n    return () => {\n      unsub.next(0);\n      unsub.complete();\n    };\n  }, [timerOn]);\n\n  const handleStart = () => {\n    setTimerOn(prevTimerState => !prevTimerState);\n    setStatus('ticking');\n  }\n\n  const handleStop = () => {\n    setTime(0);\n    setTimerOn(false);\n    setStatus('not-ticking');\n  }\n\n  const handleReset = () => {\n    if (timerOn && status === 'ticking') {\n      handleStop();\n      handleStart();\n    }\n  }\n\n  const oneSec = time / 1000;\n\n  const formatTime = (durationInSeconds: number) => {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor((durationInSeconds % 3600) / 60);\n    const seconds = durationInSeconds - hours * 3600 - minutes * 60;\n\n    return `${hours}h ${minutes}m ${seconds}s`;\n  }\n\n  return (\n    <div className=\"App\">\n      <span\n        className=\"Time\"\n      >\n        {formatTime(oneSec)}\n      </span>\n      <div>\n        {status === 'not-ticking' && (\n          <button\n            type=\"button\"\n            onClick={handleStart}\n            className=\"Button\"\n          >\n            Start\n          </button>\n        )}\n        {status === 'ticking' && (\n          <button\n            type=\"button\"\n            onClick={handleStop}\n            className=\"Button\"\n          >\n            Stop\n          </button>\n        )}\n        <button\n          type=\"button\"\n          onClick={handleReset}\n          className=\"Button\"\n        >\n          Reset\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}