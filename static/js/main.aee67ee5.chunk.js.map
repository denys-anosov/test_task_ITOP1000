{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","useState","time","setTime","timerOn","setTimerOn","isWaitClicked","setIsWaitClicked","useEffect","unsub","Subject","interval","pipe","takeUntil","subscribe","prevTime","next","complete","handleStart","useCallback","prevTimerState","handleStop","handleReset","handleWait","setTimeout","oneSec","formatTime","durationInSeconds","hours","Math","floor","minutes","seconds","className","type","onClick","ReactDOM","render","document","getElementById"],"mappings":"8NA6GeA,EAvGO,WACpB,MAAwBC,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACE,EAA0CJ,oBAAS,GAAnD,mBAAOK,EAAP,KAAsBC,EAAtB,KAEFC,qBAAU,WACR,IAAMC,EAAQ,IAAIC,IAUlB,OARAC,YAAS,KACNC,KAAKC,YAAUJ,IACfK,WAAU,WACLV,GACFD,GAAQ,SAAAY,GAAQ,OAAIA,EAAW,UAI9B,WACLN,EAAMO,KAAK,GACXP,EAAMQ,cAEP,CAACb,IAEJ,IAAMc,EAAcC,uBAAY,WAC9Bd,GAAW,SAAAe,GAAc,OAAKA,OAC7B,IAGGC,EAAaF,uBAAY,WAC7BhB,EAAQ,GACRE,GAAW,KACV,IAEGiB,EAAcH,uBAAY,WAC9BE,IACAH,MACC,CAACA,EAAaG,IAEXE,EAAaJ,uBAAY,WACzBb,EACFD,GAAW,GACDC,IACVC,GAAiB,GACjBiB,YAAW,kBAAMjB,GAAiB,KAAQ,QAE3C,CAACD,IAGEmB,EAASvB,EAAO,IAEhBwB,EAAaP,uBAAY,SAACQ,GAC9B,IAAMC,EAAQC,KAAKC,MAAMH,EAAoB,MACvCI,EAAUF,KAAKC,MAAOH,EAAoB,KAAQ,IAClDK,EAAUL,EAA4B,KAARC,EAAyB,GAAVG,EAEnD,MAAM,GAAN,OAAUH,EAAV,aAAoBG,EAApB,aAAgCC,EAAhC,OACC,IAEH,OACE,sBAAKC,UAAU,MAAf,UACE,sBACEA,UAAU,OADZ,SAGGP,EAAWD,KAEd,iCACIrB,GACA,wBACE8B,KAAK,SACLC,QAASjB,EACTe,UAAU,SAHZ,mBAQD7B,GACC,wBACE8B,KAAK,SACLC,QAASd,EACTY,UAAU,SAHZ,kBAQF,wBACEC,KAAK,SACLD,UAAU,SACVE,QAASZ,EAHX,kBAOA,wBACEW,KAAK,SACLC,QAASb,EACTW,UAAU,SAHZ,sBAQF,yCAAY7B,EAAU,KAAO,aCpGnCgC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.aee67ee5.chunk.js","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { interval, Subject } from 'rxjs';\nimport { takeUntil } from \"rxjs/operators\";\nimport './App.css';\n\n\nconst App: React.FC = () => {\n  const [time, setTime] = useState(0);\n  const [timerOn, setTimerOn] = useState(false);\n    const [isWaitClicked, setIsWaitClicked] = useState(false);\n\n  useEffect(() => {\n    const unsub = new Subject();\n\n    interval(1000)\n      .pipe(takeUntil(unsub))\n      .subscribe(() => {\n        if (timerOn) {\n          setTime(prevTime => prevTime + 1000)\n        }\n      });\n\n    return () => {\n      unsub.next(0);\n      unsub.complete();\n    };\n  }, [timerOn]);\n\n  const handleStart = useCallback(() => {\n    setTimerOn(prevTimerState => !prevTimerState);\n  }, [])\n\n\n  const handleStop = useCallback(() => {\n    setTime(0);\n    setTimerOn(false);\n  }, []);\n\n  const handleReset = useCallback(() => {\n    handleStop();\n    handleStart();\n  }, [handleStart, handleStop]);\n\n  const handleWait = useCallback(() => {\n    if (isWaitClicked) {\n      setTimerOn(false);\n    } else if (!isWaitClicked) {\n      setIsWaitClicked(true);\n      setTimeout(() => setIsWaitClicked(false), 300);\n    }\n  }, [isWaitClicked]);\n\n\n  const oneSec = time / 1000;\n\n  const formatTime = useCallback((durationInSeconds: number) => {\n    const hours = Math.floor(durationInSeconds / 3600);\n    const minutes = Math.floor((durationInSeconds % 3600) / 60);\n    const seconds = durationInSeconds - hours * 3600 - minutes * 60;\n\n    return `${hours}h ${minutes}m ${seconds}s`;\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <span\n        className=\"Time\"\n      >\n        {formatTime(oneSec)}\n      </span>\n      <div>\n        {!timerOn && (\n          <button\n            type=\"button\"\n            onClick={handleStart}\n            className=\"Button\"\n          >\n            Start\n          </button>\n        )}\n        {timerOn && (\n          <button\n            type=\"button\"\n            onClick={handleStop}\n            className=\"Button\"\n          >\n            Stop\n          </button>\n        )}\n        <button\n          type=\"button\"\n          className=\"Button\"\n          onClick={handleWait}\n        >\n          Wait\n        </button>\n        <button\n          type=\"button\"\n          onClick={handleReset}\n          className=\"Button\"\n        >\n          Reset\n        </button>\n      </div>\n      <p>Status: {timerOn ? 'ON' : 'OFF'}</p>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}